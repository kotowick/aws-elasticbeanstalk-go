// Code generated by go-bindata.
// sources:
// resources/cloudformation/templates/webserver_v1.json
// resources/cloudformation/templates/worker_v1.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesCloudformationTemplatesWebserver_v1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\x3d\xcb\xbf\x62\xa0\xd3\x2e\x60\xec\x02\xe9\x4d\x37\xdb\xeb\xb4\x46\xdc\x5d\x23\x4a\x13\xa0\x45\x0e\x23\x69\xec\x10\xa6\x49\x81\xa4\xec\xba\x81\xfe\x7b\x21\x4a\x94\x29\xc7\x8a\x62\xec\xea\x48\x71\xe6\xbd\xf9\x7c\x7c\x1d\x05\xe1\x0a\x15\xee\xc8\x90\xd2\x21\x44\xf0\x3a\x1a\x05\x41\x88\x79\xfe\x1d\x77\x54\x1f\x04\x41\x10\x7e\x23\x9d\x2a\x96\x1b\x26\x45\x75\x18\x56\x7f\x41\xae\x61\x92\xe7\x9c\xa5\x58\x9d\x7f\x09\xc7\xf6\xea\xc3\x31\xb7\x86\x61\x6c\x14\x13\x9b\x70\x14\x04\xe5\xd8\x79\x9d\x16\xe9\x96\x4c\xbf\xdf\xfa\x3f\x88\xca\xfd\xe1\x85\x14\x55\x08\x30\x2d\x44\xc6\x09\x98\x06\x2e\x53\x34\x94\x7d\x08\xeb\x8e\x8e\xfd\x40\xb7\x92\x67\xa4\xbe\xde\x32\x4e\xe2\x14\x4b\x83\x34\xec\x9e\xc4\xfe\x63\x09\x32\x2f\x04\x73\xb1\x67\x4a\x8a\x1d\x09\x33\xe8\xd8\x30\x52\xfd\x5e\x3d\x4f\xf0\xc0\x48\xc1\xa7\x03\x25\x9a\xd4\x9e\x14\x48\x05\x07\xa9\xb6\xa4\x3e\xf7\x80\x8c\x1b\x97\x6b\x2c\xb8\x2d\x41\xf8\xe4\x8c\x3d\x02\xfb\x3c\x1d\x8e\x8a\xfe\x65\xda\x30\xb1\x81\xc7\xd5\x0c\x16\xdf\x86\xf3\x95\x2b\xb6\x47\x43\x71\x91\x08\x32\xba\x1f\xa0\xbe\x00\x8b\xec\x93\xfe\x0c\x6b\xa9\x00\x4f\x0d\x06\xa8\x35\xdb\xd8\xe0\x3f\x00\x58\x24\x9c\xa5\xd7\xe3\xcd\x97\xd3\xab\x70\xb4\xe4\x45\xe5\x2d\x36\x98\x6e\xdf\xc1\x69\xae\x81\xbd\x07\x85\xa6\xcc\xc2\x25\x05\xe3\x1f\xe8\x66\xe2\xc9\x4c\x49\xfd\x4e\x20\x4f\x8c\x73\x4b\x3e\xad\xee\x01\xee\x91\x71\x4c\x18\x67\xe6\x08\xff\x49\x41\xfa\x0b\x3c\xa8\x82\xbe\xde\x22\xd7\x04\x53\x29\x39\x61\xef\xc8\xbe\xed\x14\xa3\x0a\x6a\x8e\x27\x9c\xcb\x03\x65\x8f\xc8\x0b\xb2\x84\xfe\x71\xbf\x21\x5c\x57\xde\x43\x78\x3e\x31\xdf\xd2\xf1\x34\x28\x60\xbf\xde\xae\x42\x71\x6a\xac\xf9\xec\x06\xee\xe8\xb8\x42\xa6\xc0\x48\x20\x81\x09\x27\x88\xe3\x3f\x00\xd3\x94\xb4\xae\x0e\xed\x6c\x71\xd4\x86\xa5\x30\x25\x14\xda\x20\xdf\xc2\x8b\xd4\x46\x87\x63\x07\x66\x63\xf3\x72\x5a\x1d\xba\xda\x91\xda\xb3\x94\xee\x25\x7f\x67\x90\x17\x93\x3f\x41\x49\x4e\x75\xcd\x92\xe3\x05\x44\x23\x61\x87\x02\x37\x04\x8d\x47\x3d\x5c\x51\x56\xd9\x8a\x5f\x0a\xee\x5c\xbe\x8b\x3e\xaa\x09\x84\xf7\xa4\x65\xa1\x52\xf2\x96\xbe\xb7\xcb\xdb\x72\x75\xdc\x4c\x9e\xe2\x28\x6a\x18\xb4\x04\xa2\xc8\xb7\x1b\x3b\xa3\x95\x92\x39\x29\xc3\x1c\x40\x5d\x8d\xa0\x0b\xd3\x76\x06\x84\xf7\xb4\xb6\x18\xad\xf2\x94\x8d\xa7\xf2\x94\x33\xcf\xf2\x91\x94\xf6\x78\x5e\x49\xd3\x59\x8f\x47\xfd\x64\x87\xa9\x76\xf2\x55\x8e\x5b\xab\xd8\x26\xb6\x56\x92\xb3\xe0\x83\x30\xfe\xcd\x93\xc0\x4e\xd8\xee\xbc\x1c\x77\xef\x3b\x19\xeb\x5c\xb6\x87\xa5\x83\x2c\x47\xe7\xa9\xf2\x25\xe7\x9a\x5a\x76\xa5\xea\x27\x6b\x79\x29\x41\xb5\x9d\x07\xe3\xec\x7c\xc3\x56\x5d\x3b\x46\xb1\xbf\x6a\x2f\xc0\x9d\xad\xe2\xd2\x0e\x41\x65\xd8\x94\x7b\x89\x09\xf1\x7e\x8a\x6d\x4b\x9d\x0c\x7f\xd8\x49\x8c\xc9\x54\x2b\xa9\xde\x75\xcd\xaf\xe0\xd5\x6e\x2d\x9d\x63\x5a\xe7\x13\x0f\x3a\xa2\xf4\x26\xaa\xe4\x73\x0c\x8d\xa5\x23\x19\x3e\xae\x66\x8b\xac\x3a\xb7\x5b\xf3\x8c\x83\x55\xdc\xb2\x45\xbd\xe8\x1a\x0b\x23\x75\x8a\x9c\x89\x4d\x84\x7a\x73\x01\x62\xe2\x6f\xfc\xbf\xab\x8d\xdf\xc1\x0b\x27\xe2\x08\x37\x5e\x46\x9b\xb4\x5e\x17\x87\xd3\xd3\x9e\x48\xce\x55\xbe\xfc\x39\xb4\xf9\x72\x3a\x04\xd8\x55\xf9\x81\x24\x12\x4f\x22\x2e\x31\x4b\x90\x57\x7b\x52\x5d\x80\xb4\x2a\x5b\x65\xaf\x0f\xf1\xa4\xc4\x83\x60\x76\xb6\x92\x76\xb6\xc8\x1f\xad\xb7\x99\xf5\xb4\xa8\x07\xba\x23\x57\x57\xf4\x0b\xc7\x42\xa4\x2f\xa9\x14\x6b\xb6\x29\x54\xb3\xa7\xdf\x26\x7b\x76\x73\xd7\x68\x75\x0f\x7e\x2b\xe5\xbf\x1c\x7b\x81\xbb\x45\x23\x5e\x2b\x25\xd7\xac\x3f\x07\x5d\xd9\x2c\xcb\x86\xc7\xb3\x2f\x16\x4e\xe2\x7e\x14\x26\x2f\x4e\x8f\xbf\xf0\xaf\xfb\x65\xbf\xd2\x7e\xfb\x1e\x83\x7d\x87\xd8\x47\xa0\xf7\xcc\x5e\x4a\xcc\x60\xda\x74\x8c\x53\x56\x9f\xda\xad\x88\xa2\xdf\xc9\x4c\x8c\x69\x1e\x43\xf3\x6e\xa1\xe7\x22\xcb\x25\x13\xc6\xc2\x3f\x3b\x86\xa3\x72\xf4\x7f\x00\x00\x00\xff\xff\xf7\xb4\x6d\x61\x7d\x0d\x00\x00")

func resourcesCloudformationTemplatesWebserver_v1JsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesCloudformationTemplatesWebserver_v1Json,
		"resources/cloudformation/templates/webserver_v1.json",
	)
}

func resourcesCloudformationTemplatesWebserver_v1Json() (*asset, error) {
	bytes, err := resourcesCloudformationTemplatesWebserver_v1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/cloudformation/templates/webserver_v1.json", size: 3453, mode: os.FileMode(420), modTime: time.Unix(1489441985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesCloudformationTemplatesWorker_v1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\x22\x39\x13\x3e\x77\xff\x8a\x92\x4f\x33\x52\x6b\x22\xe5\xbd\x71\x03\x26\xd1\xa0\xcc\xbb\xcb\xa6\x51\x22\xed\x6a\x0e\xd5\xa6\x20\x16\xc6\x6e\xd9\x6e\x58\x36\xea\xff\xbe\xb2\xfb\x3b\x43\x07\xb2\x1a\x2e\x48\xd5\x55\xcf\x53\x5f\x7e\xea\x35\x8e\xd8\x12\x0d\xee\xc9\x91\xb1\x0c\x26\xf0\x1a\xc7\x51\xc4\x30\xcf\x7f\xc3\x3d\x55\x86\x28\x8a\xd8\x57\xb2\xdc\x88\xdc\x09\xad\xbc\x91\xf9\xaf\xa0\x37\x30\xcd\x73\x29\x38\x7a\xfb\x17\x96\x04\xd7\xd5\x29\x0f\x81\x2c\x75\x46\xa8\x2d\x8b\xa3\xa8\x4c\x1a\xd4\x59\xc1\x77\xe4\xc6\x71\xab\xef\xa0\x3c\xfc\xf1\x85\x0c\x79\x06\x98\x15\x6a\x2d\x09\x84\x05\xa9\x39\x3a\x5a\x5f\xc5\xf5\x40\xa7\x71\xa2\x7b\x2d\xd7\x64\x6e\xee\x85\x24\xd5\xd5\x52\x33\x5d\x86\x27\x75\xb8\xae\x41\xee\x85\xe0\x4e\x1d\x84\xd1\x6a\x4f\xca\x5d\x04\x76\x82\xcc\x38\x6a\x0f\x09\x56\x82\x0c\x7c\x3a\x52\x66\xc9\x1c\xc8\x80\x36\x70\xd4\x66\x47\xe6\xf3\x08\x49\x52\x43\x6e\xb0\x90\x61\x04\xec\x39\xf8\xf7\xd8\x0f\x39\xbf\x5c\x12\xfd\x2d\xac\x13\x6a\x0b\x4f\xcb\x39\x2c\xbe\x5e\x6e\x56\x6e\xc4\x01\x1d\xa5\x45\xa6\xc8\xd9\x71\x82\xca\x01\x16\xeb\x4f\xf6\x33\x6c\xb4\x01\xec\xb6\x0b\xd0\x5a\xb1\x0d\x95\x5f\x41\x58\x64\x52\xf0\x8f\xf3\xdd\x7d\x9f\x7d\x88\x87\x64\x36\x37\xda\xbe\x43\xf1\x2c\xa4\x0c\xb0\xdc\xfb\x01\x1e\x50\x48\xcc\x84\x14\xee\x04\xff\x68\x45\xf6\x0b\xac\x4c\x41\x37\xf7\x28\x2d\xc1\x4c\x6b\x49\x38\xfa\x92\x7e\x1e\xa0\x33\x05\xd5\xe6\xa9\x94\xfa\x48\xeb\x27\x94\x05\x85\x84\xfe\x6a\x3e\x03\xdb\x78\x74\x06\x3f\xba\xcc\xad\x96\x85\x4f\x32\x75\xc8\x77\xef\x74\xa8\x76\x83\xe0\x07\x85\xa5\x75\x68\x54\x56\x08\x79\xc5\x23\xdc\xd1\xa9\x7b\x25\x10\x7e\xa3\x5b\x85\xaa\x5b\xac\xbb\xf9\x2d\x3c\xd0\x69\x89\xc2\x80\xd3\x40\x0a\x33\x49\x90\xa6\xdf\x00\x39\x27\x6b\xbd\x31\x3c\x2c\x89\xd6\x09\x0e\x33\x42\x65\x1d\xca\x1d\xbc\x68\xeb\x2c\x4b\x1a\xb2\x90\x5a\x2f\x33\x6f\x6c\x3a\x40\xe6\x20\x38\x3d\x6a\xf9\xce\x2b\x5e\x4c\xff\x0f\x46\x4b\xaa\x2a\xcf\x4e\x67\x18\x9d\x86\x3d\x2a\xdc\x12\xd4\x88\xf6\x72\x5f\x84\x8f\x55\xbf\x94\xbc\x81\x7c\x97\x3d\xae\x12\x60\x8f\x64\x75\x61\x38\xb5\x8b\xcb\x7a\x3a\xfe\x44\xc6\xd6\x29\xf8\xa1\x0d\xb0\xa6\xcf\xe9\x64\x52\xa7\xd1\x66\x31\x99\x9c\x89\x4e\xea\xd0\xa5\xd1\x39\x19\x27\x1a\x2e\x3f\x81\x68\x48\xd8\xae\x08\xb0\x47\xda\x04\x9e\xf6\xfe\x94\x49\x1b\x91\x86\x94\x2b\x81\xee\x6f\x54\x14\x3e\xfe\xaf\x77\x59\x06\x38\x8d\xbd\x4c\x86\xfe\xcd\x75\x18\x38\x07\x63\xd9\x50\x96\x71\xfd\xd7\x0e\xae\xaf\xe4\x4d\x0a\xd7\x34\x68\x78\x01\x60\xbc\x35\xff\xa5\x39\x55\x4c\x8f\xa2\x89\xe9\x07\xb5\x07\x6b\x10\x94\xf6\x65\xe0\x0c\xd5\x1b\x99\x28\xc3\x6a\xf9\xc0\x7a\xcc\xdf\x31\x23\xf9\x26\xe6\xdc\x2a\x75\x81\xfe\x6a\xb1\x7a\xe3\x83\xa1\x61\x6d\x8e\x51\xd2\x7e\xe9\x36\xf8\x8f\xf4\xe6\xdb\x6a\xb5\x64\xf5\xa7\x0e\xed\xf7\xf0\x5a\x52\x72\x5e\x36\x2a\xd5\x6b\xc2\x5f\x03\xb2\xcd\x91\x57\x20\x78\xb4\x13\xe2\xb7\x13\x7f\xe2\x12\xa8\x23\x5b\xf2\xa7\xe5\x7c\xb1\xf6\xf6\xa0\x9f\x6f\x2a\x0a\x57\xb1\x6c\x59\xcf\x42\x63\xe1\xb4\xe5\x28\x85\xda\x4e\xd0\x6e\xcf\x50\x4c\xfb\xda\xff\xa7\xd7\xfe\x01\x1f\x9b\xaa\x13\xdc\xf6\xe6\x53\x0f\xe9\x63\x75\x34\x37\x6f\xa4\x92\xb7\x97\xf8\x42\x51\x54\x2d\x72\xd6\x2e\x32\xf5\xf7\xf8\x67\xf2\x9e\xa4\x8e\x24\x30\x50\xdd\x0f\xb4\x54\x62\xa1\xf8\x0b\xd7\x6a\x23\xb6\x85\x09\xcb\x75\x26\x81\xbb\xf9\xed\x43\x7d\x72\x46\xf8\xdb\x8b\xf4\xcb\xb9\x17\xb8\x5f\xd4\x1a\xbc\x34\x7a\x23\xc6\x7b\x30\x54\xff\xb2\xac\xf3\xf8\x11\x43\x27\x37\x71\x54\xc6\x65\xfc\x6f\x00\x00\x00\xff\xff\x59\xee\xb5\xc3\x9f\x0b\x00\x00")

func resourcesCloudformationTemplatesWorker_v1JsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesCloudformationTemplatesWorker_v1Json,
		"resources/cloudformation/templates/worker_v1.json",
	)
}

func resourcesCloudformationTemplatesWorker_v1Json() (*asset, error) {
	bytes, err := resourcesCloudformationTemplatesWorker_v1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/cloudformation/templates/worker_v1.json", size: 2975, mode: os.FileMode(420), modTime: time.Unix(1489442003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/cloudformation/templates/webserver_v1.json": resourcesCloudformationTemplatesWebserver_v1Json,
	"resources/cloudformation/templates/worker_v1.json": resourcesCloudformationTemplatesWorker_v1Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"cloudformation": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"webserver_v1.json": &bintree{resourcesCloudformationTemplatesWebserver_v1Json, map[string]*bintree{}},
				"worker_v1.json": &bintree{resourcesCloudformationTemplatesWorker_v1Json, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

